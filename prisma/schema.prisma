// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  TEACHER
  STUDENT
  GUARDIAN
  ACCOUNTANT
  LIBRARIAN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InvoiceStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  OVERDUE
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_BANKING
  ONLINE_GATEWAY
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  staff                    Staff?
  accountantProfile        Accountant?
  librarianProfile         Librarian?
  notifications            Notification[]
  notificationPreferences  NotificationPreference[]
  pushSubscriptions        PushSubscription[]

  @@map("users")
}

// Academic Year model
model AcademicYear {
  id        String   @id @default(cuid())
  year      String   @unique // e.g., "2025-2026"
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments Enrollment[]
  exams       Exam[]

  @@map("academic_years")
}

// Class Level model (e.g., "Class 6", "Dakhil 1st Year")
model ClassLevel {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sections                Section[]
  classSubjects           ClassSubject[]
  enrollments             Enrollment[]
  examSchedules           ExamSchedule[]
  feeStructures           FeeStructure[]
  classAnnouncements      ClassAnnouncement[]
  seatingArrangements     SeatingArrangement[]
  teacherClassAssignments TeacherClassAssignment[]
  assignments             Assignment[]
  lessonPlans             LessonPlan[]
  lessonShares            LessonShare[]

  @@map("class_levels")
}

// Section model (e.g., "A", "Blue")
model Section {
  id           String   @id @default(cuid())
  name         String
  classLevelId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  classLevel            ClassLevel             @relation(fields: [classLevelId], references: [id], onDelete: Cascade)
  enrollments           Enrollment[]
  classAnnouncements    ClassAnnouncement[]
  seatingArrangements   SeatingArrangement[]
  teacherClassAssignments TeacherClassAssignment[]
  assignments           Assignment[]
  lessonPlans           LessonPlan[]
  lessonShares          LessonShare[]

  @@unique([name, classLevelId]) // Unique section name per class
  @@map("sections")
}

// Subject model (e.g., "Mathematics", "Hadith Sharif")
model Subject {
  id          String   @id @default(cuid())
  name        String
  subjectCode String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  classSubjects           ClassSubject[]
  examSchedules           ExamSchedule[]
  teacherClassAssignments TeacherClassAssignment[]
  assignments             Assignment[]
  lessonPlans             LessonPlan[]
  lessonTemplates         LessonTemplate[]

  @@map("subjects")
}

// Join table for many-to-many relationship between ClassLevel and Subject
model ClassSubject {
  id           String   @id @default(cuid())
  classLevelId String
  subjectId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  classLevel ClassLevel @relation(fields: [classLevelId], references: [id], onDelete: Cascade)
  subject    Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classLevelId, subjectId]) // Prevent duplicate assignments
  @@map("class_subjects")
}

// Guardian model for parent/guardian information
model Guardian {
  id                String   @id @default(cuid())
  name              String
  relationToStudent String   // e.g., "Father", "Mother", "Guardian"
  contactNumber     String
  email             String?
  occupation        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  students Student[]

  @@map("guardians")
}

// Student Address model
model StudentAddress {
  id               String   @id @default(cuid())
  presentAddress   String
  permanentAddress String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  student Student?

  @@map("student_addresses")
}

// Student model - central model for student information
model Student {
  id              String    @id @default(cuid())
  studentId       String    @unique // Human-readable ID like "STU-2025-0001"
  name            String
  email           String?   @unique
  dateOfBirth     DateTime
  gender          Gender
  bloodGroup      String?
  religion        String?
  nationality     String?
  studentPhotoUrl String?
  admissionDate   DateTime
  guardianId      String
  addressId       String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  guardian         Guardian        @relation(fields: [guardianId], references: [id], onDelete: Restrict)
  address          StudentAddress  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  enrollments      Enrollment[]
  invoices         Invoice[]
  lessonShares     LessonShare[]
  bookIssues       BookIssue[]
  libraryFines     LibraryFine[]

  @@map("students")
}

// Enrollment model - tracks student's enrollment in classes across academic years
model Enrollment {
  id             String   @id @default(cuid())
  studentId      String
  classLevelId   String
  sectionId      String
  academicYearId String
  rollNumber     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  student            Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classLevel         ClassLevel          @relation(fields: [classLevelId], references: [id], onDelete: Restrict)
  section            Section             @relation(fields: [sectionId], references: [id], onDelete: Restrict)
  academicYear       AcademicYear        @relation(fields: [academicYearId], references: [id], onDelete: Restrict)
  marks              Marks[]
  results            Result[]
  studentAttendances StudentAttendance[]
  assignmentSubmissions AssignmentSubmission[]

  @@unique([studentId, academicYearId]) // One enrollment per student per academic year
  @@unique([sectionId, academicYearId, rollNumber]) // Unique roll number per section per year
  @@map("enrollments")
}

// Staff Address model - similar to StudentAddress for staff addresses
model StaffAddress {
  id               String   @id @default(cuid())
  presentAddress   String
  permanentAddress String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  staff Staff?

  @@map("staff_addresses")
}

// Staff model - central model for all employees
model Staff {
  id              String   @id @default(cuid())
  staffId         String   @unique // Human-readable ID like "EMP-2025-0001"
  name            String
  email           String   @unique
  designation     String   // e.g., "Assistant Teacher", "Principal"
  department      String   // e.g., "Science", "Mathematics"
  dateOfBirth     DateTime
  gender          Gender
  contactNumber   String
  joiningDate     DateTime
  qualification   String
  userId          String   @unique
  addressId       String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address                 StaffAddress             @relation(fields: [addressId], references: [id], onDelete: Cascade)
  attendances             StaffAttendance[]
  leaveRequests           LeaveRequest[]
  studentAttendances      StudentAttendance[]
  classAnnouncements      ClassAnnouncement[]
  seatingArrangements     SeatingArrangement[]
  teacherClassAssignments TeacherClassAssignment[]
  assignments             Assignment[]
  assignmentSubmissions   AssignmentSubmission[]
  assignmentFiles         AssignmentFile[]
  lessonPlans             LessonPlan[]
  lessonTemplates         LessonTemplate[]
  lessonResources         LessonResource[]
  lessonShares            LessonShare[]

  @@map("staff")
}

// Staff Attendance model - tracks daily attendance for staff
model StaffAttendance {
  id        String           @id @default(cuid())
  staffId   String
  date      DateTime         @db.Date
  status    AttendanceStatus
  remarks   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, date]) // One attendance record per staff per day
  @@map("staff_attendances")
}

// Leave Request model - manages leave applications
model LeaveRequest {
  id          String      @id @default(cuid())
  staffId     String
  leaveType   String
  startDate   DateTime    @db.Date
  endDate     DateTime    @db.Date
  reason      String
  status      LeaveStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  remarks     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}

// ============================================================================
// EXAMINATION & RESULT MANAGEMENT MODELS
// ============================================================================

// Grading System model - allows admins to define their own grading scales
model GradingSystem {
  id        String   @id @default(cuid())
  name      String   @unique // e.g., "Standard GPA 5", "Percentage Based"
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  grades  Grade[]
  results Result[]

  @@map("grading_systems")
}

// Grade model - represents a single grade within a grading system
model Grade {
  id              String   @id @default(cuid())
  gradingSystemId String
  gradeName       String   // e.g., "A+", "A", "B+", "B"
  minPercentage   Float    // e.g., 80.0
  maxPercentage   Float    // e.g., 100.0
  points          Float    // e.g., 5.0, 4.0, 3.5
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  gradingSystem GradingSystem @relation(fields: [gradingSystemId], references: [id], onDelete: Cascade)
  marks         Marks[]
  results       Result[]

  @@unique([gradingSystemId, gradeName]) // Unique grade name per grading system
  @@unique([gradingSystemId, minPercentage, maxPercentage]) // No overlapping ranges
  @@map("grades")
}

// Exam model - represents a major examination event
model Exam {
  id             String   @id @default(cuid())
  name           String   // e.g., "Annual Examination 2025", "Mid-Term Exam"
  academicYearId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  academicYear  AcademicYear   @relation(fields: [academicYearId], references: [id], onDelete: Restrict)
  examSchedules ExamSchedule[]
  results       Result[]

  @@unique([name, academicYearId]) // Unique exam name per academic year
  @@map("exams")
}

// ExamSchedule model - schedules a specific subject's exam for a class
model ExamSchedule {
  id           String    @id @default(cuid())
  examId       String
  classLevelId String
  subjectId    String
  examDate     DateTime  @db.Date
  startTime    String    // e.g., "09:00"
  endTime      String    // e.g., "12:00"
  fullMarks    Float     // e.g., 100.0
  passMarks    Float     // e.g., 40.0
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  exam       Exam        @relation(fields: [examId], references: [id], onDelete: Cascade)
  classLevel ClassLevel  @relation(fields: [classLevelId], references: [id], onDelete: Restrict)
  subject    Subject     @relation(fields: [subjectId], references: [id], onDelete: Restrict)
  marks      Marks[]

  @@unique([examId, classLevelId, subjectId]) // One schedule per exam-class-subject combination
  @@map("exam_schedules")
}

// Marks model - the core table to store individual student marks
model Marks {
  id             String   @id @default(cuid())
  enrollmentId   String   // Links to student enrollment (student + class + academic year)
  examScheduleId String
  marksObtained  Float    // e.g., 85.5
  gradeId        String?  // Calculated grade based on percentage
  remarks        String?  // Optional remarks like "Excellent", "Needs improvement"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  enrollment   Enrollment   @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  examSchedule ExamSchedule @relation(fields: [examScheduleId], references: [id], onDelete: Cascade)
  grade        Grade?       @relation(fields: [gradeId], references: [id], onDelete: SetNull)

  @@unique([enrollmentId, examScheduleId]) // One mark entry per student per exam schedule
  @@map("marks")
}

// Result model - stores the final processed result of a student for an exam
model Result {
  id              String   @id @default(cuid())
  enrollmentId    String   // Links to student enrollment
  examId          String
  totalMarks      Float    // Sum of all marks obtained
  totalFullMarks  Float    // Sum of all full marks
  percentage      Float    // Calculated percentage
  gpa             Float    // Calculated GPA based on grading system
  finalGradeId    String   // Overall grade for the exam
  gradingSystemId String   // Which grading system was used
  rank            Int?     // Rank in class (calculated)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  enrollment    Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  exam          Exam          @relation(fields: [examId], references: [id], onDelete: Cascade)
  finalGrade    Grade         @relation(fields: [finalGradeId], references: [id], onDelete: Restrict)
  gradingSystem GradingSystem @relation(fields: [gradingSystemId], references: [id], onDelete: Restrict)

  @@unique([enrollmentId, examId]) // One result per student per exam
  @@map("results")
}

// ============================================================================
// FINANCE & ACCOUNTING MODELS
// ============================================================================

// FeeHead model - represents a category for fees (e.g., "Monthly Tuition Fee", "Exam Fee")
model FeeHead {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Monthly Tuition Fee", "Exam Fee", "Library Fee"
  description String?  // Optional description of the fee
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  feeStructures FeeStructure[]
  invoiceItems  InvoiceItem[]

  @@map("fee_heads")
}

// FeeStructure model - defines the amount for a FeeHead for a specific ClassLevel
model FeeStructure {
  id           String   @id @default(cuid())
  feeHeadId    String
  classLevelId String
  amount       Decimal  @db.Decimal(10, 2) // e.g., 5000.00
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  feeHead    FeeHead    @relation(fields: [feeHeadId], references: [id], onDelete: Cascade)
  classLevel ClassLevel @relation(fields: [classLevelId], references: [id], onDelete: Cascade)

  @@unique([feeHeadId, classLevelId]) // One fee structure per fee head per class
  @@map("fee_structures")
}

// Invoice model - represents an automatically generated bill for a student
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique // e.g., "INV-2025-0001"
  studentId     String
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  totalAmount   Decimal       @db.Decimal(10, 2)
  status        InvoiceStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  student      Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  invoiceItems InvoiceItem[]
  payments     Payment[]

  @@map("invoices")
}

// InvoiceItem model - a single item within an invoice
model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceId String
  feeHeadId String
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  feeHead FeeHead @relation(fields: [feeHeadId], references: [id], onDelete: Restrict)

  @@map("invoice_items")
}

// Payment model - records a payment made against an invoice
model Payment {
  id            String        @id @default(cuid())
  invoiceId     String
  paymentDate   DateTime      @default(now())
  amountPaid    Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  transactionId String?       // Optional transaction ID from payment gateway
  remarks       String?       // Optional remarks
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Expense model - tracks institutional expenses
model Expense {
  id          String   @id @default(cuid())
  expenseHead String   // e.g., "Salaries", "Utilities", "Maintenance"
  amount      Decimal  @db.Decimal(10, 2)
  expenseDate DateTime @default(now())
  description String?  // Optional description
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}

// ============================================================================
// CLASS MANAGEMENT MODELS
// ============================================================================

// Student Attendance model - tracks daily attendance for students
model StudentAttendance {
  id           String           @id @default(cuid())
  enrollmentId String           // Links to student enrollment
  date         DateTime         @db.Date
  status       AttendanceStatus
  markedBy     String           // Staff ID who marked attendance
  remarks      String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  markedByStaff Staff   @relation(fields: [markedBy], references: [id], onDelete: Restrict)

  @@unique([enrollmentId, date]) // One attendance record per student per day
  @@map("student_attendances")
}

// Class Announcement model - for class-specific announcements
model ClassAnnouncement {
  id           String    @id @default(cuid())
  title        String
  content      String    @db.Text
  classLevelId String
  sectionId    String?   // Optional: specific section or all sections in class
  authorId     String    // Staff ID who created the announcement
  isPinned     Boolean   @default(false)
  attachments  Json?     // Array of file attachments
  publishedAt  DateTime  @default(now())
  expiresAt    DateTime? // Optional expiration date
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  classLevel ClassLevel @relation(fields: [classLevelId], references: [id], onDelete: Cascade)
  section    Section?   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  author     Staff      @relation(fields: [authorId], references: [id], onDelete: Restrict)

  @@map("class_announcements")
}

// Seating Arrangement model - stores classroom seating layouts
model SeatingArrangement {
  id           String   @id @default(cuid())
  name         String   // e.g., "Default Layout", "Exam Layout"
  classLevelId String
  sectionId    String
  layout       Json     // Stores the seating layout data
  rows         Int      // Number of rows
  columns      Int      // Number of columns
  createdBy    String   // Staff ID who created the layout
  isActive     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  classLevel ClassLevel @relation(fields: [classLevelId], references: [id], onDelete: Cascade)
  section    Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  creator    Staff      @relation(fields: [createdBy], references: [id], onDelete: Restrict)

  @@unique([classLevelId, sectionId, name]) // Unique layout name per class-section
  @@map("seating_arrangements")
}

// Teacher Class Assignment model - links teachers to classes they teach
model TeacherClassAssignment {
  id           String   @id @default(cuid())
  teacherId    String   // Staff ID of the teacher
  classLevelId String
  sectionId    String
  subjectId    String   // Subject they teach to this class
  isClassTeacher Boolean @default(false) // Is this teacher the class teacher?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  teacher    Staff      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classLevel ClassLevel @relation(fields: [classLevelId], references: [id], onDelete: Cascade)
  section    Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  subject    Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([teacherId, classLevelId, sectionId, subjectId]) // One assignment per teacher-class-subject
  @@map("teacher_class_assignments")
}

// ============================================================================
// NOTIFICATION SYSTEM MODELS
// ============================================================================

enum NotificationPriority {
  HIGH
  MEDIUM
  LOW
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  READ
}

enum NotificationType {
  SYSTEM
  ACADEMIC
  FINANCIAL
  ATTENDANCE
  EXAM
  ANNOUNCEMENT
  REMINDER
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
}

// Notification Template model - predefined notification templates
model NotificationTemplate {
  id          String           @id @default(cuid())
  name        String           @unique // e.g., "exam_reminder", "fee_due"
  type        NotificationType
  priority    NotificationPriority @default(MEDIUM)
  title       Json             // Multi-language titles: {"en": "...", "bn": "...", "ar": "..."}
  content     Json             // Multi-language content
  channels    NotificationChannel[] // Supported channels for this template
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  notifications Notification[]

  @@map("notification_templates")
}

// Notification model - individual notification instances
model Notification {
  id         String             @id @default(cuid())
  templateId String?            // Optional: if based on a template
  userId     String             // Recipient user ID
  type       NotificationType
  priority   NotificationPriority @default(MEDIUM)
  title      String             // Final rendered title
  content    String             // Final rendered content
  data       Json?              // Additional data payload
  channels   NotificationChannel[] // Channels to send through
  status     NotificationStatus @default(PENDING)
  scheduledAt DateTime?         // For scheduled notifications
  sentAt     DateTime?          // When notification was sent
  readAt     DateTime?          // When notification was read
  expiresAt  DateTime?          // Optional expiration date
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  // Relations
  template         NotificationTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveryAttempts NotificationDelivery[]
  queue            NotificationQueue?

  @@index([userId, status])
  @@index([priority, scheduledAt])
  @@map("notifications")
}

// New models for Accountant and Librarian profiles
model Accountant {
  id                String   @id @default(cuid())
  userId            String   @unique
  employeeId        String   @unique
  department        String?
  specialization    String?
  experience        Int?
  qualifications    String?
  salary            Decimal?
  joiningDate       DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accountants")
}

model Librarian {
  id                String   @id @default(cuid())
  userId            String   @unique
  employeeId        String   @unique
  department        String?
  specialization    String?
  experience        Int?
  qualifications    String?
  salary            Decimal?
  joiningDate       DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookIssues        BookIssue[]
  bookReturns       BookReturn[]

  @@map("librarians")
}

// Library Management Models
model BookCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  books       Book[]

  @@map("book_categories")
}

model Book {
  id            String      @id @default(cuid())
  isbn          String?     @unique
  title         String
  author        String
  publisher     String?
  publishedYear Int?
  edition       String?
  pages         Int?
  language      String?
  categoryId    String
  totalCopies   Int         @default(1)
  availableCopies Int       @default(1)
  location      String?
  description   String?
  coverImage    String?
  price         Decimal?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  category      BookCategory @relation(fields: [categoryId], references: [id])
  issues        BookIssue[]
  returns       BookReturn[]

  @@map("books")
}

model BookIssue {
  id          String    @id @default(cuid())
  bookId      String
  studentId   String
  librarianId String
  issueDate   DateTime  @default(now())
  dueDate     DateTime
  returnDate  DateTime?
  status      IssueStatus @default(ISSUED)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  book        Book      @relation(fields: [bookId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])
  librarian   Librarian @relation(fields: [librarianId], references: [id])
  returns     BookReturn[]
  fines       LibraryFine[]

  @@map("book_issues")
}

model BookReturn {
  id          String    @id @default(cuid())
  bookIssueId String
  bookId      String
  librarianId String
  returnDate  DateTime  @default(now())
  condition   BookCondition @default(GOOD)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  bookIssue   BookIssue @relation(fields: [bookIssueId], references: [id])
  book        Book      @relation(fields: [bookId], references: [id])
  librarian   Librarian @relation(fields: [librarianId], references: [id])

  @@map("book_returns")
}

model LibraryFine {
  id          String    @id @default(cuid())
  bookIssueId String
  studentId   String
  amount      Decimal
  reason      String
  status      FineStatus @default(PENDING)
  dueDate     DateTime
  paidDate    DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  bookIssue   BookIssue @relation(fields: [bookIssueId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])

  @@map("library_fines")
}

// New enums for library management
enum IssueStatus {
  ISSUED
  RETURNED
  OVERDUE
  LOST
}

enum BookCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
}

enum FineStatus {
  PENDING
  PAID
  WAIVED
}

// Notification Delivery model - tracks delivery attempts across channels
model NotificationDelivery {
  id             String            @id @default(cuid())
  notificationId String
  channel        NotificationChannel
  status         NotificationStatus @default(PENDING)
  attemptCount   Int               @default(0)
  lastAttemptAt  DateTime?
  deliveredAt    DateTime?
  failureReason  String?           // Error message if failed
  externalId     String?           // External service ID (e.g., email message ID)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([notificationId, channel])
  @@map("notification_deliveries")
}

// User Notification Preferences model - user's notification settings
model NotificationPreference {
  id        String                @id @default(cuid())
  userId    String
  type      NotificationType      // Which type of notification
  channels  NotificationChannel[] // Preferred channels for this type
  isEnabled Boolean               @default(true)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("notification_preferences")
}

// Push Subscription model - stores push notification subscriptions
model PushSubscription {
  id         String   @id @default(cuid())
  userId     String
  endpoint   String   @unique
  p256dh     String   // Public key for encryption
  auth       String   // Authentication secret
  userAgent  String?  // Browser/device info
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

// Notification Queue model - for managing notification processing queue
model NotificationQueue {
  id             String             @id @default(cuid())
  notificationId String             @unique
  priority       NotificationPriority
  scheduledAt    DateTime           @default(now())
  processedAt    DateTime?
  failureCount   Int                @default(0)
  lastError      String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  // Relations
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([priority, scheduledAt])
  @@map("notification_queue")
}

// ============================================================================
// ASSIGNMENT MANAGEMENT MODELS
// ============================================================================

model Assignment {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  instructions String?  @db.Text
  classLevelId String
  sectionId    String
  subjectId    String
  teacherId    String
  dueDate      DateTime
  attachments  Json?    // Array of file URLs and metadata
  maxMarks     Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  classLevel  ClassLevel @relation(fields: [classLevelId], references: [id])
  section     Section    @relation(fields: [sectionId], references: [id])
  subject     Subject    @relation(fields: [subjectId], references: [id])
  teacher     Staff      @relation(fields: [teacherId], references: [id])
  submissions AssignmentSubmission[]
  files       AssignmentFile[]

  // Indexes for performance
  @@index([dueDate])
  @@index([teacherId])
  @@index([classLevelId, sectionId])
  @@map("assignments")
}

model AssignmentSubmission {
  id             String    @id @default(cuid())
  assignmentId   String
  enrollmentId   String
  submissionDate DateTime?
  fileUrls       Json?     // Array of submitted file URLs
  status         String    @default("PENDING") // PENDING, SUBMITTED, GRADED
  marksObtained  Int?
  feedback       String?   @db.Text
  gradedAt       DateTime?
  gradedBy       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])
  grader     Staff?     @relation(fields: [gradedBy], references: [id])

  // Unique constraint to prevent duplicate submissions
  @@unique([assignmentId, enrollmentId])
  @@index([status])
  @@index([submissionDate])
  @@map("assignment_submissions")
}

model AssignmentFile {
  id           String   @id @default(cuid())
  assignmentId String?
  submissionId String?
  fileName     String
  fileUrl      String
  fileSize     Int
  fileType     String
  uploadedBy   String
  createdAt    DateTime @default(now())

  // Relations
  assignment Assignment?          @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  uploader   Staff               @relation(fields: [uploadedBy], references: [id])

  @@index([assignmentId])
  @@index([uploadedBy])
  @@map("assignment_files")
}

// ============================================================================
// LESSON PLANNING MODELS
// ============================================================================

model LessonPlan {
  id              String   @id @default(cuid())
  title           String
  description     String?
  objectives      String[] // Learning objectives
  activities      String[] // Lesson activities
  duration        Int      // Duration in minutes
  lessonDate      DateTime
  status          LessonStatus @default(DRAFT)
  assessmentMethods String[] // Assessment methods
  notes           String?
  classLevelId    String
  sectionId       String
  subjectId       String
  teacherId       String
  templateId      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  classLevel      ClassLevel @relation(fields: [classLevelId], references: [id])
  section         Section    @relation(fields: [sectionId], references: [id])
  subject         Subject    @relation(fields: [subjectId], references: [id])
  teacher         Staff      @relation(fields: [teacherId], references: [id])
  template        LessonTemplate? @relation(fields: [templateId], references: [id])
  resources       LessonResource[]
  shares          LessonShare[]

  @@index([lessonDate])
  @@index([teacherId])
  @@index([classLevelId, sectionId])
  @@map("lesson_plans")
}

model LessonTemplate {
  id              String   @id @default(cuid())
  title           String
  description     String?
  objectives      String[] // Learning objectives template
  activities      String[] // Activities template
  duration        Int      // Default duration in minutes
  assessmentMethods String[] // Assessment methods template
  category        String?  // Template category
  isPublic        Boolean  @default(false) // Can be shared between teachers
  usageCount      Int      @default(0) // Track template usage
  subjectId       String
  createdById     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  subject         Subject  @relation(fields: [subjectId], references: [id])
  createdBy       Staff    @relation(fields: [createdById], references: [id])
  lessonPlans     LessonPlan[]

  @@index([subjectId])
  @@index([createdById])
  @@map("lesson_templates")
}

model LessonResource {
  id           String     @id @default(cuid())
  fileName     String
  fileUrl      String
  fileType     String
  fileSize     Int
  resourceType ResourceType @default(DOCUMENT)
  description  String?
  lessonPlanId String
  uploadedById String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  lessonPlan   LessonPlan @relation(fields: [lessonPlanId], references: [id], onDelete: Cascade)
  uploadedBy   Staff      @relation(fields: [uploadedById], references: [id])

  @@index([lessonPlanId])
  @@index([uploadedById])
  @@map("lesson_resources")
}

model LessonShare {
  id           String     @id @default(cuid())
  lessonPlanId String
  sharedWith   ShareTarget @default(CLASS)
  classLevelId String?
  sectionId    String?
  studentId    String?
  permissions  SharePermission @default(VIEW_ONLY)
  accessCount  Int        @default(0)
  lastAccessed DateTime?
  isActive     Boolean    @default(true)
  sharedById   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  lessonPlan   LessonPlan @relation(fields: [lessonPlanId], references: [id], onDelete: Cascade)
  classLevel   ClassLevel? @relation(fields: [classLevelId], references: [id])
  section      Section?   @relation(fields: [sectionId], references: [id])
  student      Student?   @relation(fields: [studentId], references: [id])
  sharedBy     Staff      @relation(fields: [sharedById], references: [id])

  @@index([lessonPlanId])
  @@index([sharedById])
  @@map("lesson_shares")
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ResourceType {
  DOCUMENT
  IMAGE
  VIDEO
  AUDIO
  PRESENTATION
  WORKSHEET
  OTHER
}

enum ShareTarget {
  CLASS
  SECTION
  INDIVIDUAL
}

enum SharePermission {
  VIEW_ONLY
  DOWNLOAD
  INTERACTIVE
}
