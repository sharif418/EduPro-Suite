version: '3.8'

# =============================================================================
# EduPro Suite - Production Docker Compose Configuration
# =============================================================================
# This configuration is optimized for production deployment with:
# - Multi-stage builds for optimized images
# - Health checks for all services
# - Resource limits and restart policies
# - Volume mounts for persistent data
# - Network configuration for service communication
# - SSL/TLS termination
# - Load balancer setup
# - Monitoring and logging integration
# =============================================================================

services:
  # =============================================================================
  # APPLICATION SERVICE
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        - NODE_ENV=production
        - "BUILD_TIME=${BUILD_TIME:-$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")}"
        - REQUIRE_LOCKFILE=true
      # Enhanced build configuration for dependency reliability
      cache_from:
        - edupro-suite:cache
      labels:
        - "com.edupro.service=app"
        - "com.edupro.version=${APP_VERSION:-latest}"
        - "com.edupro.build-time=${BUILD_TIME:-$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")}"
    image: edupro-suite:${APP_VERSION:-latest}
    container_name: edupro-app
    restart: unless-stopped
    
    # Environment Configuration
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - "REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379"
      - PORT=3000
      # Enhanced environment variables for dependency handling
      - NPM_CONFIG_CACHE=/app/.npm-cache
      - NPM_CONFIG_AUDIT_LEVEL=moderate
      - NPM_CONFIG_FUND=false
      - NPM_CONFIG_UPDATE_NOTIFIER=false
    
    # Port Mapping (internal only, exposed via nginx)
    expose:
      - "3000"
    
    # Resource Limits (optimized for dependency-heavy builds)
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 180s
    
    # Health Check
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Volume Mounts
    volumes:
      - app_uploads:/app/public/uploads
      - app_logs:/app/logs
      - app_cache:/app/.next/cache
    
    # Dependencies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # Networks
    networks:
      - app_network
      - db_network
      - cache_network
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=app"

  # =============================================================================
  # DATABASE SERVICE (PostgreSQL)
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: edupro-postgres
    restart: unless-stopped
    
    # Environment Configuration
    environment:
      - POSTGRES_DB=${DB_NAME:-edupro_production}
      - POSTGRES_USER=${DB_USER:-edupro}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    
    # Port Mapping (internal only)
    expose:
      - "5432"
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Health Check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-edupro} -d ${DB_NAME:-edupro_production}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    # Volume Mounts
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
    
    # Networks
    networks:
      - db_network
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=postgres"
    
    # Security
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # CACHE SERVICE (Redis)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: edupro-redis
    restart: unless-stopped
    
    # Command with configuration
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    
    # Port Mapping (internal only)
    expose:
      - "6379"
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Health Check
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a \"$REDIS_PASSWORD\" PING | grep -q PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Volume Mounts
    volumes:
      - redis_data:/data
    
    # Networks
    networks:
      - cache_network
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=redis"
    
    # Security
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # REVERSE PROXY & LOAD BALANCER (Nginx)
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: edupro-nginx
    restart: unless-stopped
    
    # Port Mapping
    ports:
      - "80:80"
      - "443:443"
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Health Check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Volume Mounts
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
      - app_uploads:/var/www/uploads:ro
    
    # Dependencies
    depends_on:
      app:
        condition: service_healthy
    
    # Networks
    networks:
      - app_network
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=nginx"
    
    # Security
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # MONITORING SERVICE (Prometheus)
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: edupro-prometheus
    restart: unless-stopped
    
    # Command with configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # Port Mapping (internal only)
    expose:
      - "9090"
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Health Check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Volume Mounts
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    # Networks
    networks:
      - monitoring_network
      - app_network
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=prometheus"

  # =============================================================================
  # METRICS VISUALIZATION (Grafana)
  # =============================================================================
  grafana:
    image: grafana/grafana:10.0.0
    container_name: edupro-grafana
    restart: unless-stopped
    
    # Environment Configuration
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN:-localhost}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASS}
      - GF_SMTP_FROM_ADDRESS=${EMAIL_FROM}
    
    # Port Mapping (internal only)
    expose:
      - "3000"
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Health Check
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Volume Mounts
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    # Dependencies
    depends_on:
      prometheus:
        condition: service_healthy
    
    # Networks
    networks:
      - monitoring_network
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=grafana"

  # =============================================================================
  # LOG AGGREGATION (Loki)
  # =============================================================================
  loki:
    image: grafana/loki:2.9.0
    container_name: edupro-loki
    restart: unless-stopped
    
    # Command with configuration
    command: -config.file=/etc/loki/local-config.yaml
    
    # Port Mapping (internal only)
    expose:
      - "3100"
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Volume Mounts
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    
    # Networks
    networks:
      - monitoring_network
    
    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=loki"


# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  # Application Data
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/uploads
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/logs
  
  app_cache:
    driver: local
  
  # Database Data
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/backups
  
  # Cache Data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  
  # Monitoring Data
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/grafana
  
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/loki
  
  # Nginx Logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/nginx-logs

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  # Application Network
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  # Database Network
  db_network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
  
  # Cache Network
  cache_network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/16
  
  # Monitoring Network
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================
# 1. Environment Variables:
#    - Copy .env.production.example to .env.production
#    - Update all placeholder values with production values
#    - Ensure DB_PASSWORD, REDIS_PASSWORD, and GRAFANA_PASSWORD are set
#
# 2. SSL Certificates:
#    - Place SSL certificates in ./ssl/ directory
#    - Update nginx configuration to use correct certificate paths
#
# 3. Data Directory:
#    - Set DATA_DIR environment variable or use default ./data
#    - Ensure proper permissions: sudo chown -R 1000:1000 ./data
#
# 4. Backup Configuration:
#    - Customize backup schedule in ./scripts/backup.sh
#    - Configure backup retention policy
#    - Set up external backup storage (S3, etc.)
#
# 5. Monitoring:
#    - Access Grafana at https://your-domain.com/grafana
#    - Import dashboards from ./monitoring/grafana/dashboards/
#    - Configure alerting rules in Prometheus
#
# 6. Scaling:
#    - Adjust replica count for app service based on load
#    - Consider using Docker Swarm or Kubernetes for advanced orchestration
#    - Monitor resource usage and adjust limits accordingly
#
# 7. Security:
#    - Regularly update base images
#    - Scan images for vulnerabilities
#    - Use secrets management for sensitive data
#    - Enable firewall rules to restrict access
#
# 8. Deployment Commands:
#    - Start: docker-compose -f docker-compose.production.yml up -d
#    - Stop: docker-compose -f docker-compose.production.yml down
#    - Update: docker-compose -f docker-compose.production.yml pull && docker-compose -f docker-compose.production.yml up -d
#    - Logs: docker-compose -f docker-compose.production.yml logs -f [service]
#    - Scale: docker-compose -f docker-compose.production.yml up -d --scale app=5
