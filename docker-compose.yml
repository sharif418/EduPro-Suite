version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: edupro-suite-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-strong_password_123}
      - POSTGRES_DB=${POSTGRES_DB:-edupro_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - edupro-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-edupro_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: edupro-suite-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    networks:
      - edupro-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD:-redis_password_123} PING | grep -q PONG"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  migrate:
    build: 
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: edupro-suite-migrate
    depends_on:
      db:
        condition: service_healthy
    networks:
      - edupro-network
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-strong_password_123}@db:5432/${POSTGRES_DB:-edupro_db}?schema=public
    command: sh -c "npx prisma migrate deploy && npx prisma db seed"
    restart: "no"

  app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_TIME: ${BUILD_TIME:-$(date +%s)}
    container_name: edupro-suite-app
    restart: unless-stopped
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - edupro-network
    env_file: .env
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-strong_password_123}@db:5432/${POSTGRES_DB:-edupro_db}?schema=public
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
    volumes:
      - uploads:/app/public/uploads:rw
      - ./logs:/app/logs:rw
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: node server.js

  nginx:
    image: nginx:alpine
    container_name: edupro-suite-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - uploads:/app/public/uploads:ro
    depends_on:
      app:
        condition: service_started
    networks:
      - edupro-network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local

networks:
  edupro-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
